generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum PayoutStatus {
  SUCCESS
  FAILED
  PENDING
}

enum CourseLevel {
  beginner
  intermediate
  advanced
}

model User {
  id               String             @id @unique @default(uuid())
  email            String             @unique
  fullName         String
  bio              String?
  phoneNumber      String?
  bankAccount      String?
  image            String?
  password         String
  role             Role               @default(USER)
  Courses          Course[]
  Review           Review[]
  PurchasedCourses PurchasedCourses[]
  recordedClass    RecordedClass[]
  savedCourses     SavedCourses[]
  Purchase         Purchase[]
  BankAccount      BankAccount[]
  Payout           Payout[]
  updatedAt        DateTime           @updatedAt
  createdAt        DateTime           @default(now())
}

model Course {
  id               String             @unique @default(uuid())
  title            String
  shortDescription String
  description      String
  price            Float
  thumbnail        String
  category         String             @default("Development")
  tags             String
  language         String             @default("English")
  isPublished      Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  duration         String
  level            CourseLevel
  instructorId     String?
  instructor       User?              @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  Review           Review[]
  PurchasedCourses PurchasedCourses[]
  recordedClass    RecordedClass[]
  savedCourses     SavedCourses[]
  Purchase         Purchase[]
}

model Purchase {
  id         String        @id @default(uuid())
  courseId   String
  course     Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studentId  String
  student    User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  amountPaid Float
  paymentId  String?
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
}

model BankAccount {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountNumber     String
  ifscCode          String
  accountHolderName String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Payout {
  id            String       @id @default(uuid())
  instructorId  String
  instructor    User         @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  amount        Float
  status        PayoutStatus @default(PENDING)
  fundAccountId String
  transactionId String
  narration     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model PurchasedCourses {
  id        String   @unique @default(uuid())
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model RecordedClass {
  id          String   @unique @default(uuid())
  title       String
  videoUrl    String
  duration    Float    @default(0)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model SavedCourses {
  id       String @id @default(uuid())
  courseId String
  userId   String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
}

model Review {
  id        String    @unique @default(uuid())
  content   String
  rating    Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  courseId  String
  userId    String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
}
