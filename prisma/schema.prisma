generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id               String             @id @unique @default(uuid())
  fullName         String
  bio              String?
  image            String?
  email            String             @unique
  password         String
  role             Role
  balance          Int                @default(0)
  createdAt        DateTime           @default(now())
  Courses          Course[]
  Review           Review[]
  purchasedCourses purchasedCourses[]
  CreditCard       CreditCard[]
  recordedClass    recordedClass[]
}

model Course {
  id               String             @unique @default(uuid())
  title            String
  shortDescription String
  tags             String
  description      String
  price            Int
  thumbnail        String
  createdAt        DateTime           @default(now())
  duration         String
  userId           String
  level            String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  Review           Review[]
  purchasedCourses purchasedCourses[]
  recordedClass    recordedClass[]
}

model recordedClass {
  id        String   @unique @default(uuid())
  title     String
  videoUrl String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CreditCard {
  id             String   @unique @default(uuid())
  bankName       String
  cardHolderName String
  accountNumber  String   @unique
  cvv            String
  balance        Int      @default(30000)
  expiryDate     String
  createdAt      DateTime @default(now())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @unique @default(uuid())
  content   String
  rating    Int      @default(0)
  createdAt DateTime @default(now())
  courseId  String
  userId    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model purchasedCourses {
  id        String   @unique @default(uuid())
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}
